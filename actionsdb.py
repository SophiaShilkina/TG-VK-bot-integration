import aiosqlite
from botsinit import vk_ms
import time
import asyncio
import logging


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def checking_user_in_database(idu):
    async with aiosqlite.connect('action.db') as db:
        async with db.execute('SELECT userId FROM users WHERE userId = ?', (idu,)) as cursor:
            user_in_database = await cursor.fetchone()
            if user_in_database is None:
                await db.execute(
                    'INSERT INTO users (userId, act, fullname, data, persons, gender, room, pastRooms) '
                    'VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                    (idu, 'start', '0', '0', '0', '0', '0', '0')
                )
                await db.commit()

        async with db.execute('SELECT act FROM users WHERE userId = ?', (idu,)) as cursor:
            result = await cursor.fetchone()
            if result is not None:
                userAct = result[0]
                return userAct
            else:
                return None


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∞–≥–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async def saving_between_responses(idu, userAct):
    while_exit = 0
    while while_exit != 1:
        try:
            await asyncio.sleep(1)
            message_text = vk_ms.messages.getHistory(user_id=idu, count=1)['items'][0]['text']
            if len(message_text) < 50:
                async with aiosqlite.connect('action.db') as db:
                    await db.execute(f'UPDATE users SET act = ?, {userAct} = ? WHERE userId = ?',
                                     (userAct, message_text, idu,))
                    if userAct == "room":
                        await db.execute('UPDATE users SET pastRooms = ? WHERE userId = ?', (message_text, idu,))
                    await db.commit()
                    async with db.execute('SELECT act FROM users WHERE userId = ?', (idu,)) as cursor:
                        result = await cursor.fetchone()
                        if result is not None:
                            userAct = result[0]
                    while_exit = 1
                    return userAct

        except:
            pass
        time.sleep(1)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∞–≥–∞
async def changing_act(idu, userAct):
    async with aiosqlite.connect('action.db') as db:
        await db.execute('UPDATE users SET act = ? WHERE userId = ?', (userAct, idu,))
        await db.commit()


# –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –µ–≥–æ —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
async def presentation_of_information(idu):
    async with aiosqlite.connect('action.db') as db:
        async with db.execute('SELECT * FROM users WHERE userId = ?', (idu,)) as cursor:
            record = await cursor.fetchone()
            if record:
                dates, persons, gender, room = record[3], record[4], record[5], record[6]
            else:
                dates, persons, gender, room = None, None, None, None

            text = (f'–°–ø–∞—Å–∏–±–æ, —è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                    f'–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n'
                    f'üìÜ –î–∞—Ç—ã: {dates}\n'
                    f'üëî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω: {persons}\n'
                    f'üë´ –ú—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã: {gender}\n'
                    f'üè° –ö–æ–º–Ω–∞—Ç—ã: {room}\n')
            return text


# –í–Ω–µ—Å–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
async def get_fullname(event):
    try:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ID: {event.user_id}")
        user_get = vk_ms.users.get(user_ids=event.user_id)
        fullname = user_get[0]['first_name'] + ' ' + user_get[0]['last_name']
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è: {fullname}")
        async with aiosqlite.connect('action.db') as db:
            await db.execute('UPDATE users SET fullname = ? WHERE userId = ?', (fullname, event.user_id,))
            await db.commit()
        return fullname
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None


# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω—É
async def information_to_admin(idu):
    async with aiosqlite.connect('action.db') as db:
        async with db.execute('SELECT * FROM users WHERE userId = ?', (idu,)) as cursor:
            record = await cursor.fetchone()
            if record:
                name, dates, persons, gender, room = record[2], record[3], record[4], record[5], record[6]
            else:
                name, dates, persons, gender, room = None, None, None, None, None

        message_1 = (f'1. –ò–º—è: <b>{name}</b>\n'
                     f'2. –î–∞—Ç—ã: <b>{dates}</b>\n'
                     f'3. –ß–µ–ª–æ–≤–µ–∫: <b>{persons}</b>\n'
                     f'4. –ú/–ñ: <b>{gender}</b>\n'
                     f'5. –ö–æ–º–Ω–∞—Ç—ã: <b>{room}</b>')
        return message_1


async def return_user_name(idu):
    async with aiosqlite.connect('action.db') as db:
        async with db.execute('SELECT fullname FROM users WHERE userId = ?', (idu,)) as cursor:
            result = await cursor.fetchone()
            if result is not None:
                fullname = result[0]
                return fullname
            else:
                return None
