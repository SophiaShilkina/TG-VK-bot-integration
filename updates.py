import aiosqlite
from bots_init import vk_ms
from keyboards import keyboard_tg
from msg import *
import asyncio
import logging
import re


async def update_user_data(idu):
    while_exit = 0
    while while_exit != 1:
        try:
            message_text = vk_ms.messages.getHistory(user_id=idu, count=1)['items'][0]['text']
            if len(message_text) < 89:
                if not re.match(r'^\s*\d{1,2}\.\d{1,2}\.\d{2}\s*[\s\-‚Äì‚Äî]{1,5}\s*\d{1,2}\.\d{1,2}\.\d{2}\s*\.*\s*$',
                                message_text):
                    await write_msg(idu,
                                    '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞—Ç—ã '
                                    '–µ—â–µ —Ä–∞–∑, –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—è—Å—å —Ñ–æ—Ä–º–∞—Ç–∞:\n\n–¥–¥.–º–º.–≥–≥ ‚Äì –¥–¥.–º–º.–≥–≥')
                    continue

                async with aiosqlite.connect("action.db") as db:
                    await db.execute(f'UPDATE users SET data = ? WHERE userId = ?', (message_text, idu,))
                    await db.commit()
                    while_exit = 1
                    return message_text.text

        except Exception as e:
            logging.error(f"An error occurred: {e}")
        await asyncio.sleep(1)


async def update_user_persons(idu):
    while_exit = 0
    while while_exit != 1:
        try:
            message_text = vk_ms.messages.getHistory(user_id=idu, count=1)['items'][0]['text']
            if len(message_text) < 84:
                if not re.match(r'^\s*\d{1,3}\s*\.*\s*$',
                                message_text):
                    await write_msg(idu,
                                    '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ '
                                    '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –µ—â–µ —Ä–∞–∑, –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—è—Å—å —Ñ–æ—Ä–º–∞—Ç–∞:\n\n–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ.')
                    continue

                async with aiosqlite.connect("action.db") as db:
                    await db.execute(f'UPDATE users SET persons = ? WHERE userId = ?', (message_text, idu,))
                    await db.commit()
                    while_exit = 1
                    return message_text.text

        except Exception as e:
            logging.error(f"An error occurred: {e}")
        await asyncio.sleep(1)


async def update_user_gender(idu):
    while_exit = 0
    while while_exit != 1:
        try:
            message_text = vk_ms.messages.getHistory(user_id=idu, count=1)['items'][0]['text']
            if len(message_text) < 108:
                if not re.match(r'^\s*\d{1,3}\s*[–ú–ñ–º—É–∂—á–∏–Ω–∞–µ—â]*\s*[\\/]\s*\d{1,3}\s*[–ú–ñ–º—É–∂—á–∏–Ω–∞–µ—â]*\s*\.*\s*$',
                                message_text):
                    await write_msg(idu,
                                    '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ '
                                    '—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫ –µ—â–µ —Ä–∞–∑, –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—è—Å—å —Ñ–æ—Ä–º–∞—Ç–∞:\n\n'
                                    '–ß–∏—Å–ª–æ –º—É–∂—á–∏–Ω / –ß–∏—Å–ª–æ –∂–µ–Ω—â–∏–Ω.')
                    continue

                async with aiosqlite.connect("action.db") as db:
                    await db.execute(f'UPDATE users SET gender = ? WHERE userId = ?', (message_text, idu,))
                    await db.commit()
                    while_exit = 1
                    return message_text.text

        except Exception as e:
            logging.error(f"An error occurred: {e}")
        await asyncio.sleep(1)


async def update_user_room(idu):
    while_exit = 0
    while while_exit != 1:
        try:
            message_text = vk_ms.messages.getHistory(user_id=idu, count=1)['items'][0]['text']
            if len(message_text) < 186:
                async with aiosqlite.connect("action.db") as db:
                    await db.execute(f'UPDATE users SET room = ? WHERE userId = ?', (message_text, idu,))
                    await db.execute(f'UPDATE users SET pastRooms = ? WHERE userId = ?', (message_text, idu,))
                    await db.commit()
                    while_exit = 1
                    return message_text.text

        except Exception as e:
            logging.error(f"An error occurred: {e}")
        await asyncio.sleep(1)


async def update_user_message(idu):
    async with aiosqlite.connect("action.db") as db:
        async with db.execute(f'SELECT * FROM users WHERE userId = ?', (idu,)) as cursor:
            record = await cursor.fetchone()
            if record:
                name, dates, persons, gender, room = record[2], record[3], record[4], record[5], record[6]
            else:
                name, dates, persons, gender, room = None, None, None, None, None

        await send_message_to_admin('<b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≥–æ—Å—Ç—è:</b>\n\n'
                                   f'1. –ò–º—è: <b>{name}</b>\n'
                                   f'2. –î–∞—Ç—ã: <b>{dates}</b>\n'
                                   f'3. –ß–µ–ª–æ–≤–µ–∫: <b>{persons}</b>\n'
                                   f'4. –ú/–ñ: <b>{gender}</b>\n'
                                   f'5. –ö–æ–º–Ω–∞—Ç—ã: <b>{room}</b>',
                                   keyboard_tg)


async def mistake_user_room(idu):
    async with aiosqlite.connect("action.db") as db:
        async with db.execute(f'SELECT pastRooms FROM users WHERE userId = ?', (idu,)) as cursor:
            tuple_past_room = await cursor.fetchone()
            if tuple_past_room:
                pastRoom = tuple_past_room[0]
            else:
                pastRoom = None

    await write_msg_with_photo(idu, f'üõè –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –í–∞–º–∏ –∫–æ–º–Ω–∞—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã '
                                      f'–º–µ—Å—Ç –Ω–µ—Ç.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ '
                                      f'–≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º, –∫–∞–∫—É—é –∫–æ–º–Ω–∞—Ç—É –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ '
                                      f'–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–ª—è –í–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏–π '
                                      f'–≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!\n\nüîô –í–∞—à '
                                      f'–ø—Ä–æ—à–ª—ã–π –≤—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç—ã: '
                                      f'{pastRoom}')

    while_exit = 0
    while while_exit != 1:
        try:
            message_text = vk_ms.messages.getHistory(user_id=idu, count=1)['items'][0]['text']
            if len(message_text) < 282:
                async with aiosqlite.connect("action.db") as db:
                    await db.execute(f'UPDATE users SET room = ? WHERE userId = ?', (message_text, idu,))
                    async with db.execute(f'SELECT * FROM users WHERE userId = ?', (idu,)) as cursor:
                        rooms = await cursor.fetchone()

                        if rooms:
                            room, past_room = rooms[0], rooms[0]

                        else:
                            room, past_room = None, None

                        summation = room + past_room

                    await db.execute(f'UPDATE users SET pastRooms = ? WHERE userId = ?', (summation, idu,))
                    await db.commit()
                    while_exit = 1
                    return message_text.text

        except Exception as e:
            logging.error(f"An error occurred: {e}")
        await asyncio.sleep(1)
